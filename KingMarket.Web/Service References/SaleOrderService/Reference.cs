//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KingMarket.Web.SaleOrderService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SaleOrderService.ISaleOrderService")]
    public interface ISaleOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleOrderService/GetSaleOrdersByCustomerId", ReplyAction="http://tempuri.org/ISaleOrderService/GetSaleOrdersByCustomerIdResponse")]
        System.Collections.Generic.List<KingMarket.Model.Models.SaleOrder> GetSaleOrdersByCustomerId(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleOrderService/GetSaleOrdersByCustomerId", ReplyAction="http://tempuri.org/ISaleOrderService/GetSaleOrdersByCustomerIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<KingMarket.Model.Models.SaleOrder>> GetSaleOrdersByCustomerIdAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleOrderService/GetSaleOrder", ReplyAction="http://tempuri.org/ISaleOrderService/GetSaleOrderResponse")]
        KingMarket.Model.Models.SaleOrder GetSaleOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleOrderService/GetSaleOrder", ReplyAction="http://tempuri.org/ISaleOrderService/GetSaleOrderResponse")]
        System.Threading.Tasks.Task<KingMarket.Model.Models.SaleOrder> GetSaleOrderAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleOrderService/CreateSaleOrder", ReplyAction="http://tempuri.org/ISaleOrderService/CreateSaleOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KingMarket.Model.Models.GeneralException), Action="http://tempuri.org/ISaleOrderService/CreateSaleOrderGeneralExceptionFault", Name="GeneralException", Namespace="http://schemas.datacontract.org/2004/07/KingMarket.Model.Models")]
        void CreateSaleOrder(KingMarket.Model.Models.SaleOrder myObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleOrderService/CreateSaleOrder", ReplyAction="http://tempuri.org/ISaleOrderService/CreateSaleOrderResponse")]
        System.Threading.Tasks.Task CreateSaleOrderAsync(KingMarket.Model.Models.SaleOrder myObject);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISaleOrderServiceChannel : KingMarket.Web.SaleOrderService.ISaleOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaleOrderServiceClient : System.ServiceModel.ClientBase<KingMarket.Web.SaleOrderService.ISaleOrderService>, KingMarket.Web.SaleOrderService.ISaleOrderService {
        
        public SaleOrderServiceClient() {
        }
        
        public SaleOrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SaleOrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SaleOrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SaleOrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<KingMarket.Model.Models.SaleOrder> GetSaleOrdersByCustomerId(int customerId) {
            return base.Channel.GetSaleOrdersByCustomerId(customerId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<KingMarket.Model.Models.SaleOrder>> GetSaleOrdersByCustomerIdAsync(int customerId) {
            return base.Channel.GetSaleOrdersByCustomerIdAsync(customerId);
        }
        
        public KingMarket.Model.Models.SaleOrder GetSaleOrder(int id) {
            return base.Channel.GetSaleOrder(id);
        }
        
        public System.Threading.Tasks.Task<KingMarket.Model.Models.SaleOrder> GetSaleOrderAsync(int id) {
            return base.Channel.GetSaleOrderAsync(id);
        }
        
        public void CreateSaleOrder(KingMarket.Model.Models.SaleOrder myObject) {
            base.Channel.CreateSaleOrder(myObject);
        }
        
        public System.Threading.Tasks.Task CreateSaleOrderAsync(KingMarket.Model.Models.SaleOrder myObject) {
            return base.Channel.CreateSaleOrderAsync(myObject);
        }
    }
}
