@model KingMarket.Model.Models.BuyOrder

@{
    ViewBag.Title = "Create";
}

@if (!String.IsNullOrEmpty(ViewBag.ErrorCode) && !String.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ViewBag.ErrorCode<br />
        @ViewBag.ErrorMessage
    </div>
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Buy Order</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="form-group">
            @Html.LabelFor(model => model.SupplierId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("SupplierId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SupplierId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DocumentTypeId, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownList("DocumentTypeId", null, htmlAttributes: new { @class = "form-control" }@*, optionLabel: "Select item"*@)
                @Html.ValidationMessageFor(model => model.DocumentTypeId, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink("Add Product", "AddProductOrder", null, new { @class = "btn btn-primary" })
                <button class="btn btn-success" type="submit" value="Create">
                    <span class="glyphicon glyphicon-floppy-disk"></span>  Create
                </button>
            </div>
        </div>

    </div>
}

<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>
                    @Html.Label("Product Type")
                    @*@Html.ActionLink("Product Type", "Index", new {sortOrder = ViewBag.ProductTypeSortParm, currentFilter = ViewBag.CurrentFilter})*@
                </th>
                <th>
                    @Html.Label("Unit Measure")
                    @*@Html.ActionLink("Unit Measure", "Index", new { sortOrder = ViewBag.UnitMeasureSortParm, currentFilter = ViewBag.CurrentFilter })*@
                </th>
                <th>
                    @Html.Label("Name")
                    @*@Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })*@
                </th>
                <th>
                    @Html.Label("Unit Price")
                    @*@Html.ActionLink("Unit Price", "Index", new { sortOrder = ViewBag.UnitPriceSortParm, currentFilter = ViewBag.CurrentFilter })*@
                </th>
                <th>
                    @Html.Label("Stock")
                    @*@Html.ActionLink("Stock", "Index", new { sortOrder = ViewBag.StockSortParm, currentFilter = ViewBag.CurrentFilter })*@
                </th>
                <th>
                    @Html.Label("Quantity")
                    @*@Html.ActionLink("Quantity", "Index", new {sortOrder = ViewBag.MinStockSortParm, currentFilter = ViewBag.CurrentFilter})*@
                </th>
                <th>
                    @Html.Label("Actions")
                </th>
            </tr>
        </thead>
        @foreach (var item in Model.BuyOrderDetails)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.ProductType.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.UnitMeasure.ShortName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UnitPrice)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.Stock)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td>
                    @*<a href="@Url.Action("Details", new { id = item.ProductId })" class="btn btn-success btn-xs"><span class="glyphicon glyphicon-folder-close"></span>  View</a>*@
                    <a href="@Url.Action("Edit", new { id = item.ProductId })" class="btn btn-info btn-xs"><span class="glyphicon glyphicon-pencil"></span>  Edit</a>
                    <a href="@Url.Action("Delete", new { id = item.ProductId })" class="deleteCartItem btn btn-danger btn-xs"><span class="glyphicon glyphicon-trash"></span>  Delete</a>
                </td>
            </tr>
        }
    </table>
</div>

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}